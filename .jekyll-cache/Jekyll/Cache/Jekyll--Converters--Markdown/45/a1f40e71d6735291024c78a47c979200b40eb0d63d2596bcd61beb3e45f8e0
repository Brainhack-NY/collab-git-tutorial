I"5:<blockquote class="challenge">
  <h2 id="why-are-we-using-the-command-line">Why are we using the command line?</h2>

  <p>There are lots of graphical user interfaces (GUIs) for using Git: both stand-alone
and integrated into text editors (e.g. VSCode).
We are deliberately not using a GUI for this course because:</p>

  <ul>
    <li>you will have a better understanding of how the git commands work</li>
    <li>you will be able to use Git on any computer
(e.g. remotely accessing HPC systems, which generally only have Linux command line access)</li>
    <li>you will be able to use any GUI, rather than just the one you have learned</li>
  </ul>
</blockquote>

<h2 id="set-configuration-settings-for-git">Set configuration settings for Git</h2>

<p>When we use Git on a new computer for the first time, we need to introduce ourselves so Git not only reords changes to files, but also <em>who</em> made those changes.</p>

<p>Git commands are written as <code class="language-plaintext highlighter-rouge">git verb options</code>, where <code class="language-plaintext highlighter-rouge">verb</code> is what we want to do and <code class="language-plaintext highlighter-rouge">options</code> is additional information which may be needed for the <code class="language-plaintext highlighter-rouge">verb</code>. So to introduce ourselves to Git:</p>

<div class="language-plaintext bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git config --global user.name "Vlad Dracula"          # Quotation marks are necessary, do not include the $, it's simply a commandline indicator
$ git config --global user.email "vlad@tran.sylvan.ia"
</code></pre></div></div>

<p>Please use your own name and address instead of Dracula’s.</p>

<h2 id="select-a-default-editor">Select a default editor</h2>

<p>When version tracking, we will need to provide some short but useful information about the changes made in a version. In order to enter this information, we need a text editor, and Git needs to know our default preference when it wants us to provide some information.</p>

<div class="language-plaintext bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git config --global core.editor "nano -w"
</code></pre></div></div>

<p>To set up alternative editors, follow the same notation e.g.
<code class="language-plaintext highlighter-rouge">git config --global core.editor notepad</code>, <code class="language-plaintext highlighter-rouge">git config --global core.editor 'open -W -n'</code>,
<code class="language-plaintext highlighter-rouge">git config --global core.editor xemacs</code>.</p>

<p>You can check your settings any time, so let’s check if Git received our information:</p>
<div class="language-plaintext bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git config --list
</code></pre></div></div>

<h2 id="create-a-new-repository-with-git">Create a new repository with Git</h2>

<p>We will be working with a simple example in this tutorial. It will be a paper
that we will first start writing as a single author and then work on it further
with one of our colleagues.</p>

<p>First, let’s create a directory within your home directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span>								<span class="c"># Switch to your home directory.</span>
<span class="nv">$ </span><span class="nb">pwd</span>								<span class="c"># Print working directory (output should be /home/jovyan)</span>
<span class="nv">$ </span><span class="nb">mkdir </span>git-papers
<span class="nv">$ </span><span class="nb">cd </span>git-papers
</code></pre></div></div>

<p>Now, we need to set up this directory up to be a Git repository (or “initiate
the repository”):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git init
</code></pre></div></div>
<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Initialized empty Git repository in /home/user/git-papers/.git/
</code></pre></div></div>

<p>The directory “git-papers” is now our working directory. If we use <code class="language-plaintext highlighter-rouge">ls</code> to show the directory’s contents, it appears that nothing has changed:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span>
</code></pre></div></div>
<p>But if we add the <code class="language-plaintext highlighter-rouge">-a</code> flsg to show all contents, we will see that Git has created a hidden directory within our repository called <code class="language-plaintext highlighter-rouge">.git</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-a</span>
</code></pre></div></div>
<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>branches  config  description  HEAD  hooks  info  objects refs
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">.git</code> directory contains Git’s configuration files and will be used to store all information about our project. Be careful not to accidentally delete this directory or we will lose the project’s history!</p>

<h2 id="tracking-files-with-a-git-repository">Tracking files with a git repository</h2>

<p>Now, we’ll create a file. Let’s say we’re going to write a journal paper, so
we will start by adding the author names and a title, then save the file.</p>

<div class="language-plaintext bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ vim journal.md                    # Vim creates a new file called journal.md and opens it for editing
# Add author names and paper title
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">git status</code> allows us to find out about the current status
of files in the repository. So we can run,</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git status
</code></pre></div></div>
<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>On branch master

Initial commit

Untracked files:
(use "git add &lt;file&gt;..." to include in what will be committed)

journal.md

nothing added to commit but untracked files present (use "git add" to track)
</code></pre></div></div>

<p>Information about what Git knows about the directory is displayed. We are on
the <code class="language-plaintext highlighter-rouge">master</code> branch, which is the default branch in a Git repository
(one way to think of branches is like parallel versions of the project.
Don’t worry – we’ll talk more about branches later).</p>

<p>For now, the important bit of information is that our file is listed as
<strong>Untracked</strong> which means it is in our working directory but Git is not
tracking it - that is, any changes made to this file will not be recorded by
Git.</p>

<h2 id="add-files-to-a-git-repository">Add files to a Git repository</h2>

<p>To tell Git about the file, we will use the <code class="language-plaintext highlighter-rouge">git add</code> command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git add journal.md
<span class="nv">$ </span>git status
</code></pre></div></div>
<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>On branch master

Initial commit

Changes to be committed:
(use "git rm --cached &lt;file&gt;..." to unstage)

      	new file:   journal.md
</code></pre></div></div>

<p>Now our file is listed underneath where it says <strong>Changes to be committed</strong>.</p>

<p><code class="language-plaintext highlighter-rouge">git add</code> is used for two purposes. Firstly, to tell Git that a given file
should be tracked. Secondly, to put the file into the Git <strong>staging area</strong>
which is also known as the <em>index</em> or the <em>cache</em>.</p>

<p>The staging area can be viewed as a “loading dock”, a place to hold files we have
added, or changed, until we are ready to tell Git to record those changes in the
repository.</p>

<p><img src="../fig/borrowed/git-staging-area.svg" alt="The staging area" /></p>

<h2 id="commit-changes">Commit changes</h2>

<p>In order to tell Git to record our change, our new file, into the repository,
we need to  <strong>commit</strong> it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git commit
<span class="c"># Type a commit message: "Add title and authors"</span>
<span class="c"># Save the commit message and close your text editor (vim, notepad etc.)</span>
</code></pre></div></div>

<p>Our default editor will now pop up. Why? Well, Git can automatically figure out
that directories and files are committed, and by whom (thanks to the information
we provided before) and even, what changes were made, but it cannot figure out
why. So we need to provide this in a commit message.</p>

<p>If we save our commit message <strong>and exit the editor</strong>, Git will now commit our file.</p>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[master (root-commit) 21cfbde]
1 file changed, 2 insertions(+) Add title and authors
create mode 100644 journal.md
</code></pre></div></div>

<p>This output shows the number of files changed and the number of lines inserted
or deleted across all those files. Here, we have changed (by adding) 1 file and
inserted 2 lines.</p>

<p>Now, if we look at its status,</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git status
</code></pre></div></div>
<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>On branch master
nothing to commit, working directory clean
</code></pre></div></div>

<p>our file is now in the repository.
The output from the <code class="language-plaintext highlighter-rouge">git status</code> command means that we have a clean directory
i.e. no tracked but modified files.</p>

<p>Now we will work a bit further on our <em>journal.md</em> file by writing the introduction
section.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>vim journal.md
<span class="c"># Write introduction section</span>
</code></pre></div></div>
<p>If we now run,</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git status
</code></pre></div></div>

<p>we see changes not staged for commit section and our file is marked as
modified:</p>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>On branch master
Changes not staged for commit:
(use "git add &lt;file&gt;..." to update what will be committed)
(use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

     modified:   journal.md

no changes added to commit (use "git add" and/or "git commit -a")
</code></pre></div></div>

<p>This means that a file Git knows about has been modified by us but
has not yet been committed. So we can add it to the staging area and then
commit the changes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git add journal.md
<span class="nv">$ </span>git commit							<span class="c"># "Write introduction"</span>
</code></pre></div></div>
<p>Note that in this case we used <code class="language-plaintext highlighter-rouge">git add</code> to put journal.md to the staging
area. Git already knows this file should be tracked but doesn’t know if we want
to commit the changes we made to the file  in the repository and hence we have
to add the file to the staging area.</p>

<p>It can sometimes be quicker to provide our commit messages at the command-line
by doing <code class="language-plaintext highlighter-rouge">git commit -m "Write introduction section"</code>.</p>

<p>Let’s add a directory <em>common</em> and a file <em>references.txt</em> for references we may
want to reuse:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>common
<span class="nv">$ </span>vim common/references.txt					<span class="c"># Add a reference</span>
</code></pre></div></div>

<p>We will also add a citation in our introduction section (in journal.md).</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>vim journal.md 						<span class="c"># Use reference in introduction</span>
</code></pre></div></div>

<p>Now we need to record our work in the repository so we need to make a commit.
First we tell Git to track the references.
We can actually tell Git to track everything in the given sub-directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git add common						<span class="c"># Track everything currently in the 'common' directory</span>
<span class="nv">$ </span>git status							<span class="c"># Verify that common/references.txt is now tracked</span>
</code></pre></div></div>

<p>All files that are in <em>common</em> are now tracked.  We would also have to add
journal.md in the staging area. But there is a shortcut. We can use
<code class="language-plaintext highlighter-rouge">commit -a</code>. This option means “commit all files that are tracked and
that have been modified”.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git commit <span class="nt">-am</span> <span class="s2">"Reference J Bloggs and add references file"</span> 	<span class="c"># Add and commit all tracked files</span>
</code></pre></div></div>
<p>and Git will add, then commit, both the directory and the file.</p>

<p>In order to add all tracked files to the staging area, use <code class="language-plaintext highlighter-rouge">git commit -a</code>
(which may be very useful if you edit e.g. 10 files and now you want to commit all of them).</p>

<p><img src="../fig/borrowed/git-committing.svg" alt="The Git commit workflow" /></p>
:ET