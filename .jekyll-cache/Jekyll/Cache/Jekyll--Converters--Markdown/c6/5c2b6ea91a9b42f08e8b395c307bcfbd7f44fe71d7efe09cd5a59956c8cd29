I"ª<h3 id="looking-at-differences">Looking at differences</h3>

<p>We forgot to reference a second paper in the introduction section.
Correct it, save the file but do not commit it yet.
We can review the changes that we made using:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>vim journal.md		<span class="c"># Add second reference to introduction</span>
<span class="nv">$ </span>git diff journal.md		<span class="c"># View changes to file</span>
</code></pre></div></div>

<p>This shows the difference between the latest copy in the repository and the
unstaged changes we have made.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">-</code> means a line was deleted.</li>
  <li><code class="language-plaintext highlighter-rouge">+</code> means a line was added.</li>
  <li>Note that a line that has been edited is shown as a removal of the old line and an
addition of the updated line.</li>
</ul>

<p>Looking at differences between commits is very useful!
Note that the <code class="language-plaintext highlighter-rouge">git diff</code> command itself has a number of <a href="http://git-scm.com/docs/git-diff.html">useful
options</a>.</p>

<p>Now commit the change we made by adding the second reference:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git add journal.md
<span class="nv">$ </span>git commit			<span class="c"># "Reference second paper in introduction"</span>
</code></pre></div></div>

<h3 id="looking-at-our-history">Looking at our history</h3>

<p>To see the history of changes that we made to our repository (the most recent
changes will be displayed at the top):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git log
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>commit 4dd7f5c948fdc11814041927e2c419283f5fe84c
Author: Your Name &lt;your.name@yourplace.org&gt;
Date:   Mon Jun 26 10:21:48 2017 +0100

    Write introduction

commit c38d2243df9ad41eec57678841d462af93a2d4a5
Author: Your Name &lt;your.name@yourplace.org&gt;
Date:   Mon Jun 26 10:14:30 2017 +0100

    Add author and title
</code></pre></div></div>

<p>The output shows (on separate lines):</p>
<ul>
  <li>the commit identifier (also called revision number) which
uniquely identifies the changes made in this commit</li>
  <li>author</li>
  <li>date</li>
  <li>your commit message</li>
</ul>

<p>Git automatically assigns an identifier (e.g. 4dd7f5) to each commit
made to the repository
â€” we refer to this as <em>COMMITID</em> in the code blocks below.
In order to see the changes made between any earlier commit and our
current version, we can use  <code class="language-plaintext highlighter-rouge">git diff</code> followed by the commit identifier of the
earlier commit:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git diff COMMITID		<span class="c"># View differences between current version and COMMITID</span>
</code></pre></div></div>

<p>And, to see changes between two commits:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git diff OLDER_COMMITID NEWER_COMMITID
</code></pre></div></div>

<p>Using our commit identifiers we can set our working directory to contain the
state of the repository as it was at any commit. So, letâ€™s go back to the very
first commit we made,</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git log
<span class="nv">$ </span>git checkout INITIAL_COMMITID
</code></pre></div></div>

<p>We will get something like this:</p>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Note: checking out '21cfbdec'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 21cfbde... Add title and authors
</code></pre></div></div>

<p>If we look at <code class="language-plaintext highlighter-rouge">journal.md</code> weâ€™ll see itâ€™s our very first version. And if we
look at our directory,</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span>
</code></pre></div></div>
<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>journal.md
</code></pre></div></div>

<p>then we see that our <code class="language-plaintext highlighter-rouge">common</code> directory is gone. But, rest easy, while itâ€™s
gone from our working directory, itâ€™s still in our repository! We can jump back
to the latest commit by doing:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git checkout master
</code></pre></div></div>

<p>And <code class="language-plaintext highlighter-rouge">common</code> will be there once more,</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span>
</code></pre></div></div>
<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>common journal.md
</code></pre></div></div>
<p>So we can get any version of our files from any point in time. In other words,
we can set up our working directory back to any stage it was when we made
a commit!</p>

<p>If we want to make a commit now, we should create a new branch to retain these commits.
If we created a new commit without first creating a new branch, these commits would not overwrite any of our existing work, but they would not belong to any branch.
In order to save this work, we would need to checkout a new branch.
To discard any changes we make, we can just checkout master again.</p>

<blockquote class="callout">
  <h2 id="where-to-create-a-git-repository">Where to create a Git repository?</h2>
  <p>Avoid creating a Git repository within another Git repository.
Nesting repositories in this way causes the â€˜outerâ€™ repository to
track the contents of the â€˜innerâ€™ repository - things will get confusing!</p>
</blockquote>
:ET